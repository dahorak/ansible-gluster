#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright 2014 Jonathan Holloway <loadtheaccumulator@gmail.com>
#
# This module is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software. If not, see <http://www.gnu.org/licenses/>.
#

import os

DOCUMENTATION = """
---
module: glustersnapshot
author: Jonathan Holloway
short_description: gluster snapshot module
description:
  - This module handles gluster snapshot configurations.
version_added: "0.1"
options:
  command:
    required: true
    description:
      - Snapshot command to run (status, info, create, ...)
  snapname:
    required: false
    description:
      - The name of the snapshot
  volumename:
    required: false
    description:
      - The name of the volume
  description:
    required: false
    description:
      - Description of the snapshot
  option:
    required: false
    description:
      - The option used for the snapshot set command
  value:
    required: false
    description:
      - The value used for the snapshot set command

"""

EXAMPLES = r"""
# create a snapshot
- glustersnapshot: command=create snapname=snap1 volumename=glustervol1
# create a snapshot with description
- glustersnapshot: command=create snapname=snap1 volumename=glustervol1 description='my gluster volume snapshot'

# list snapshots
- glustersnapshot: command=list
- glustersnapshot: command=list volumename=glustervol1

# get status for snapshots
- glustersnapshot: command=status
- glustersnapshot: command=status volumename=glustervol1
- glustersnapshot: command=status snapname=snap1

# get info for snapshots
- glustersnapshot: command=info
- glustersnapshot: command=info volumename=glustervol1
- glustersnapshot: command=info snapname=snap1

# activate a snapshot
- glustersnapshot: command=activate name=snap1

# deactivate a snapshot
- glustersnapshot: command=deactivate name=snap1

# config snapshot auto-delete option
- glustersnapshot: command=config option=auto-delete value=enable
- glustersnapshot: command=config option=auto-delete value=disable

# config snapshot options for a volume
- glustersnapshot: command=config volumename=glustervol1 option=snap-max-hard-limit value=4

# delete a snapshot
- glustersnapshot: command=delete snapname=snap1

# restore a snapshot (must stop volume first)
- glustervolume: command=stop name=glustervol1
- glustersnapshot: command=restore snapname=snap1

"""

class GlusterSnapshot(object):

    def __init__(self, module):
        self.module = module
        self.snapname = module.params['snapname']
        self.volumename = module.params['volumename']
        self.description = module.params['description']
        self.option = module.params['option']
        self.value = module.params['value']

    def info(self):
        if self.snapname == "" and self.volumename != "":
            option_string = "volume " + self.volumename
        elif self.snapname != "" and self.volumename == "":
            option_string = self.snapname
        else:
            option_string = ""

        command_string = "gluster snapshot info " + option_string
        (ret, sout, serr) = self.module.run_command (command_string)

        return ret,sout,serr

    def status(self):
        if self.snapname == "" and self.volumename != "":
            option_string = "volume " + self.volumename
        elif self.snapname != "" and self.volumename == "":
            option_string = self.snapname
        else:
            option_string = ""

        command_string = "gluster snapshot status " + option_string
        (ret, sout, serr) = self.module.run_command (command_string)

        return ret,sout,serr

    def create(self):
# TODO: add force option
# TODO: possible to determine if geo-rep is setup and pause it automatically?
        if self.description != "" and self.description != None:
            description_string = "description '%s'" % self.description
        else:
            description_string = ""
        command_string = "gluster snapshot create %s %s %s --mode=script" % (self.snapname, self.volumename, description_string)

        (ret, sout, serr) = self.module.run_command(command_string)

        return ret, command_string, serr

    def list(self):
        command_string = "gluster snapshot list %s" % (self.volumename)
        (ret, sout, serr) = self.module.run_command(command_string)

        return ret,sout,serr

    def config(self):
        command_string = "gluster snapshot config %s %s %s --mode=script" % (self.volumename, self.option, self.value)
        (ret, sout, serr) = self.module.run_command(command_string)

        return ret,sout,serr

    def activate(self):
# TODO: add force option
        command_string = "gluster snapshot activate %s --mode=script" % self.snapname
        (ret, sout, serr) = self.module.run_command(command_string)

        return ret,sout,serr

    def deactivate(self):
        command_string = "gluster snapshot deactivate %s --mode=script" % self.snapname
        (ret, sout, serr) = self.module.run_command(command_string)

        return ret,sout,serr

    def delete(self):
        command_string = "gluster snapshot delete %s --mode=script" % self.snapname
        (ret, sout, serr) = self.module.run_command(command_string)

        return ret,sout,serr

    def restore(self):
        # optional: option=full
        command_string = "gluster snapshot restore %s --mode=script" % (self.snapname)
        (ret, sout, serr) = self.module.run_command(command_string)

        return ret,sout,serr


def main():
    module = AnsibleModule(
        argument_spec=dict(
            command=dict(required=True),
            snapname=dict(required=False, default=""),
            volumename=dict(required=False, default=""),
            option=dict(required=False, default=""),
            value=dict(required=False, default=""),
            description=dict(required=False, default="")
        )
    )

    params = module.params
    snapshot = GlusterSnapshot(module)

    if (params['command'] == "info"):
        (ret, output, serr) = snapshot.info()
    elif (params['command'] == "status"):
        (ret, output, serr) = snapshot.status()
    elif (params['command'] == "create"):
        (ret, output, serr) = snapshot.create()
    elif (params['command'] == "activate"):
        (ret, output, serr) = snapshot.activate()
    elif (params['command'] == "deactivate"):
        (ret, output, serr) = snapshot.deactivate()
    elif (params['command'] == "delete"):
        (ret, output, serr) = snapshot.delete()
    elif (params['command'] == "restore"):
        (ret, output, serr) = snapshot.restore()
    elif (params['command'] == "list"):
        (ret, output, serr) = snapshot.list()
    elif (params['command'] == "config"):
        (ret, output, serr) = snapshot.config()
    else:
        ret = 1
        output = ""
        serr = "No valid command provided. Nothing to do."

    if ret == 0:
        module.exit_json(msg=output)
    else:
        module.fail_json(msg=output + ": " + serr)


# import module snippets
from ansible.module_utils.basic import *
main()

